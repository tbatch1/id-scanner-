from pathlib import Path

lines = []
lines.append("    <script>")
lines.append("    (() => {")
lines.append("        const codeReader = new ZXing.BrowserPDF417Reader();")
lines.append("")
lines.append("        const videoElement = document.getElementById('video');")
lines.append("        const scannerContainer = document.getElementById('scanner-container');")
lines.append("        const resultOverlay = document.getElementById('result');")
lines.append("        const capturePreview = document.getElementById('capture-preview');")
lines.append("        const previewImage = document.getElementById('preview-image');")
lines.append("        const previewRetakeBtn = document.getElementById('preview-retake');")
lines.append("        const previewConfirmBtn = document.getElementById('preview-confirm');")
lines.append("        const previewStatus = document.getElementById('preview-status');")
lines.append("        const flashOverlay = document.getElementById('flash-overlay');")
lines.append("")
lines.append("        const scanAgainBtn = document.getElementById('scan-again');")
lines.append("        const restartScanBtn = document.getElementById('restart-scan');")
lines.append("        const completeSaleBtn = document.getElementById('complete-sale');")
lines.append("        const refreshCamerasBtn = document.getElementById('refresh-cameras');")
lines.append("        const captureFrameBtn = document.getElementById('capture-frame');")
lines.append("        const shutterButton = document.getElementById('shutter-button');")
lines.append("        const cameraSelect = document.getElementById('camera-select');")
lines.append("")
lines.append("        const toast = document.getElementById('toast');")
lines.append("        const overlayBox = document.getElementById('overlay');")
lines.append("")
lines.append("        const saleLabel = document.getElementById('sale-label');")
lines.append("        const totalLabel = document.getElementById('total-label');")
lines.append("        const clerkLabel = document.getElementById('clerk-label');")
lines.append("        const statusLabel = document.getElementById('status-label');")
lines.append("        const verificationPill = document.getElementById('verification-pill');")
lines.append("        const statusMessage = document.getElementById('status-message');")
lines.append("        const saleLinesContainer = document.getElementById('sale-lines');")
lines.append("")
lines.append("        const ageStatusDiv = document.getElementById('age-status');")
lines.append("        const nameDiv = document.getElementById('name');")
lines.append("        const dobDiv = document.getElementById('dob');")
lines.append("        const ageDiv = document.getElementById('age');")
lines.append("")
lines.append("        const urlParams = new URLSearchParams(window.location.search);")
lines.append("        const saleId = urlParams.get('saleId') || 'SALE-1001';")
lines.append("        const clerkId = urlParams.get('clerkId') || 'demo-clerk';")
lines.append("        const apiOverride = urlParams.get('api');")
lines.append("        const defaultApiBase = window.location.protocol === 'file:'")
lines.append("            ? 'http://localhost:4000/api'")
lines.append("            : `${window.location.origin}/api`;")
lines.append("        const API_BASE = apiOverride || defaultApiBase;")
lines.append("")
lines.append("        let currentStream = null;")
lines.append("        let activeVideoTrack = null;")
lines.append("        let availableDevices = [];")
lines.append("        let activeDeviceId = null;")
lines.append("        let isScanning = false;")
lines.append("        let isProcessingResult = false;")
lines.append("        let zoomCapability = null;")
lines.append("        let currentZoomValue = 1;")
lines.append("        const activePointers = new Map();")
lines.append("        let pinchState = null;")
lines.append("        let lastCaptureDataUrl = null;")
lines.append("")
lines.append("        function showToast(message, variant = 'error') {")
lines.append("            toast.textContent = message;")
lines.append("            toast.style.background = variant === 'error' ? 'rgba(220, 53, 69, 0.92)' : 'rgba(13, 110, 253, 0.92)';")
lines.append("            toast.classList.add('show');")
lines.append("            setTimeout(() => toast.classList.remove('show'), 3200);")
lines.append("        }")
lines.append("")
lines.append("        function setVerificationState(state, message) {")
lines.append("            verificationPill.textContent = state;")
lines.append("            verificationPill.classList.remove('approved', 'flagged');")
lines.append("            statusMessage.textContent = message;")
lines.append("")
lines.append("            if (state === 'Approved') {")
lines.append("                verificationPill.classList.add('approved');")
lines.append("            } else if (state === 'Flagged') {")
lines.append("                verificationPill.classList.add('flagged');")
lines.append("            }")
lines.append("        }")
lines.append("")
lines.append("        function calculateAge(dobString) {")
lines.append("            if (!dobString || dobString.length < 8) {")
lines.append("                return null;")
lines.append("            }")
lines.append("")
lines.append("            let month;")
lines.append("            let day;")
lines.append("            let year;")
lines.append("")
lines.append("            if (dobString.length === 8) {")
lines.append("                const monthCandidate = parseInt(dobString.substring(0, 2), 10);")
lines.append("                if (monthCandidate > 12) {")
lines.append("                    year = parseInt(dobString.substring(0, 4), 10);")
lines.append("                    month = parseInt(dobString.substring(4, 6), 10);")
lines.append("                    day = parseInt(dobString.substring(6, 8), 10);")
lines.append("                } else {")
lines.append("                    month = monthCandidate;")
lines.append("                    day = parseInt(dobString.substring(2, 4), 10);")
lines.append("                    year = parseInt(dobString.substring(4, 8), 10);")
lines.append("                }")
lines.append("            } else if (dobString.includes('-')) {")
lines.append("                const parts = dobString.split('-');")
lines.append("                year = parseInt(parts[0], 10);")
lines.append("                month = parseInt(parts[1], 10);")
lines.append("                day = parseInt(parts[2], 10);")
lines.append("            } else {")
lines.append("                return null;")
lines.append("            }")
lines.append("")
lines.append("            if ([month, day, year].some((value) => Number.isNaN(value))) {")
lines.append("                return null;")
lines.append("            }")
lines.append("")
lines.append("            const dob = new Date(year, month - 1, day);")
lines.append("            if (Number.isNaN(dob.getTime())) {")
lines.append("                return null;")
lines.append("            }")
lines.append("")
lines.append("            const today = new Date();")
lines.append("            let age = today.getFullYear() - dob.getFullYear();")
lines.append("            const monthDiff = today.getMonth() - dob.getMonth();")
lines.append("")
lines.append("            if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < dob.getDate())) {")
lines.append("                age -= 1;")
lines.append("            }")
lines.append("")
lines.append("            return {")
lines.append("                age,")
lines.append("                formatted: `${String(month).padStart(2, '0')}/${String(day).padStart(2, '0')}/${year}`")
lines.append("            };")
lines.append("        }")

# ...

