<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>THC Club | Age Verified Checkout</title>
    <script src="https://unpkg.com/@zxing/library@latest"></script>
    <style>
        :root {
            color-scheme: dark;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            background: #111;
            color: #f5f5f5;
            display: flex;
            flex-direction: column;
            height: 100vh;
            overflow: hidden;
        }

        header {
            background: #181818;
            padding: 18px 32px;
            border-bottom: 2px solid #0d6efd;
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        header h1 {
            font-size: 24px;
            font-weight: 600;
        }

        .meta {
            display: flex;
            flex-wrap: wrap;
            gap: 16px;
            font-size: 15px;
            color: #a5a5a5;
        }

        main {
            display: flex;
            flex: 1;
            overflow: hidden;
        }

        aside {
            width: 340px;
            background: #161616;
            border-right: 1px solid #222;
            padding: 24px;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }
        label {
            font-size: 13px;
            text-transform: uppercase;
            letter-spacing: 1.1px;
            color: #9b9b9b;
        }

        select {
            width: 100%;
            margin-top: 6px;
            margin-bottom: 12px;
            background: #202020;
            color: #f5f5f5;
            border: 1px solid #2f2f2f;
            border-radius: 6px;
            padding: 10px 12px;
            font-size: 14px;
        }

        .sale-summary h2 {
            font-size: 18px;
            margin-bottom: 12px;
        }

        .sale-lines {
            display: flex;
            flex-direction: column;
            gap: 12px;
            max-height: 200px;
            overflow-y: auto;
        }

        .sale-line {
            background: #1f1f1f;
            border-radius: 8px;
            padding: 12px;
        }

        .sale-line-title {
            font-weight: 600;
            font-size: 15px;
        }

        .sale-line-meta {
            font-size: 13px;
            color: #b5b5b5;
            margin-top: 4px;
        }

        .status-card,
        .camera-card {
            background: #1f1f1f;
            border-radius: 10px;
            padding: 16px;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .status-pill {
            align-self: flex-start;
            padding: 4px 12px;
            border-radius: 999px;
            font-size: 13px;
            background: #343434;
            color: #d8d8d8;
        }

        .status-pill.approved {
            background: rgba(13, 110, 253, 0.2);
            color: #74b4ff;
        }

        .status-pill.flagged {
            background: rgba(220, 53, 69, 0.24);
            color: #ff8a8a;
        }

        .status-message {
            font-size: 15px;
            line-height: 1.4;
            color: #c9c9c9;
        }

        .control-buttons {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .control-hint {
            font-size: 13px;
            color: #9b9b9b;
        }

        .actions {
            margin-top: auto;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        button {
            border: none;
            border-radius: 8px;
            padding: 14px 18px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.1s ease, opacity 0.1s ease;
        }

        button.primary {
            background: #0d6efd;
            color: white;
        }

        button.secondary {
            background: #2b2b2b;
            color: #f5f5f5;
        }

        button:disabled {
            opacity: 0.35;
            cursor: not-allowed;
        }

        button:not(:disabled):active {
            transform: scale(0.98);
        }

        section.scanner {
            flex: 1;
            display: flex;
            flex-direction: column;
            position: relative;
        }
        #scanner-container {
            flex: 1;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
            background: black;
        }

        #video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        #overlay {
            position: absolute;
            width: 78%;
            max-width: 480px;
            height: 220px;
            border: 3px solid rgba(13, 110, 253, 0.8);
            border-radius: 12px;
            pointer-events: none;
        }

        #overlay::before,
        #overlay::after {
            content: '';
            position: absolute;
            left: 8%;
            right: 8%;
            height: 2px;
            background: rgba(13, 110, 253, 0.55);
        }

        #overlay::before {
            top: 32%;
        }

        #overlay::after {
            bottom: 32%;
        }

        #instruction {
            position: absolute;
            top: 32px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(15, 15, 15, 0.88);
            padding: 16px 28px;
            border-radius: 10px;
            font-size: 16px;
        }

        #result {
            position: absolute;
            inset: 0;
            background: rgba(0, 0, 0, 0.92);
            display: none;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 24px;
            padding: 40px;
            text-align: center;
        }

        #result.show {
            display: flex;
        }

        .result-card {
            background: #1b1b1b;
            border-radius: 16px;
            padding: 32px 42px;
            box-shadow: 0 10px 35px rgba(0, 0, 0, 0.4);
            max-width: 540px;
            width: 100%;
        }

        .age-status {
            font-size: 56px;
            font-weight: 700;
            margin-bottom: 20px;
            border-radius: 12px;
            padding: 18px;
        }

        .age-status.approved {
            background: #198754;
            color: #e8fff1;
        }

        .age-status.denied {
            background: #dc3545;
            color: #ffecec;
        }

        .info {
            font-size: 20px;
            line-height: 1.5;
        }

        .info-label {
            color: #a5a5a5;
            font-size: 13px;
            text-transform: uppercase;
            letter-spacing: 1.4px;
        }

        .toast {
            position: fixed;
            bottom: 32px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(220, 53, 69, 0.9);
            color: white;
            padding: 14px 22px;
            border-radius: 10px;
            font-size: 15px;
            display: none;
            box-shadow: 0 12px 24px rgba(0, 0, 0, 0.3);
        }

        .toast.show {
            display: inline-flex;
        }

        @media (max-width: 980px) {
            main {
                flex-direction: column;
            }

            aside {
                width: 100%;
                border-right: none;
                border-bottom: 1px solid #222;
                flex-direction: row;
                flex-wrap: wrap;
            }

            .actions {
                width: 100%;
                flex-direction: row;
            }
        }
    </style>
</head>
<body>
    <header>
        <h1>Age Verified Checkout</h1>
        <div class="meta">
            <span id="sale-label">Sale: --</span>
            <span id="total-label">Total: --</span>
            <span id="clerk-label">Clerk: --</span>
            <span id="status-label">Status: Awaiting scan</span>
        </div>
    </header>
    <main>
        <aside>
            <section class="sale-summary">
                <h2>Current Sale</h2>
                <div class="sale-lines" id="sale-lines"></div>
            </section>
            <section class="status-card">
                <span class="status-pill" id="verification-pill">Not verified</span>
                <p class="status-message" id="status-message">
                    Hold the ID 4-6 inches from the camera. Keep the PDF417 barcode inside the blue frame and avoid glare.
                </p>
            </section>
            <section class="camera-card">
                <div>
                    <label for="camera-select">Camera</label>
                    <select id="camera-select"></select>
                </div>
                <div class="control-buttons">
                    <button class="secondary" id="refresh-cameras" type="button">Refresh cameras</button>
                    <button class="secondary" id="capture-frame" type="button">Manual snapshot</button>
                </div>
                <p class="control-hint">
                    Tip: if the webcam cannot focus, move the ID slowly toward the lens or switch to a phone camera.
                </p>
            </section>
            <div class="actions">
                <button class="primary" id="complete-sale" disabled>Complete Sale</button>
                <button class="secondary" id="restart-scan">Restart Scan</button>
            </div>
        </aside>
        <section class="scanner">
            <div id="scanner-container">
                <video id="video" autoplay muted playsinline></video>
                <div id="overlay"></div>
                <div id="instruction">Align the barcode between the guide lines</div>
                <div id="result">
                    <div class="result-card">
                        <div id="age-status" class="age-status">Scanning...</div>
                        <div class="info">
                            <div class="info-label">Customer</div>
                            <div id="name">--</div>
                        </div>
                        <div class="info">
                            <div class="info-label">Date of Birth</div>
                            <div id="dob">--</div>
                        </div>
                        <div class="info">
                            <div class="info-label">Calculated Age</div>
                            <div id="age">--</div>
                        </div>
                        <button class="secondary" id="scan-again" type="button">Scan Another ID</button>
                    </div>
                </div>
            </div>
        </section>
    </main>
    <div class="toast" id="toast"></div>
    <script>
        const codeReader = new ZXing.BrowserPDF417Reader();
        const videoElement = document.getElementById('video');
        const resultOverlay = document.getElementById('result');
        const scanAgainBtn = document.getElementById('scan-again');
        const restartScanBtn = document.getElementById('restart-scan');
        const completeSaleBtn = document.getElementById('complete-sale');
        const refreshCamerasBtn = document.getElementById('refresh-cameras');
        const captureFrameBtn = document.getElementById('capture-frame');
        const cameraSelect = document.getElementById('camera-select');
        const toast = document.getElementById('toast');
        const overlayBox = document.getElementById('overlay');
        const verificationPill = document.getElementById('verification-pill');
        const statusMessage = document.getElementById('status-message');

        const saleLabel = document.getElementById('sale-label');
        const totalLabel = document.getElementById('total-label');
        const clerkLabel = document.getElementById('clerk-label');
        const statusLabel = document.getElementById('status-label');
        const saleLinesContainer = document.getElementById('sale-lines');

        const ageStatusDiv = document.getElementById('age-status');
        const nameDiv = document.getElementById('name');
        const dobDiv = document.getElementById('dob');
        const ageDiv = document.getElementById('age');

        const urlParams = new URLSearchParams(window.location.search);
        const saleId = urlParams.get('saleId') || 'SALE-1001';
        const clerkId = urlParams.get('clerkId') || 'demo-clerk';
        const apiOverride = urlParams.get('api');
        const defaultApiBase =
            window.location.protocol === 'file:'
                ? 'http://localhost:4000/api'
                : `${window.location.origin}/api`;
        const API_BASE = apiOverride || defaultApiBase;

        let currentStream = null;
        let availableDevices = [];
        let activeDeviceId = null;
        let isScanning = false;
        let isProcessingResult = false;

        function showToast(message, variant = 'error') {
            toast.textContent = message;
            toast.style.background = variant === 'error' ? 'rgba(220, 53, 69, 0.92)' : 'rgba(13, 110, 253, 0.92)';
            toast.classList.add('show');
            setTimeout(() => toast.classList.remove('show'), 3200);
        }

        function setVerificationState(state, message) {
            verificationPill.textContent = state;
            verificationPill.classList.remove('approved', 'flagged');
            statusMessage.textContent = message;

            if (state === 'Approved') {
                verificationPill.classList.add('approved');
            } else if (state === 'Flagged') {
                verificationPill.classList.add('flagged');
            }
        }

        function calculateAge(dobString) {
            if (!dobString || dobString.length < 8) {
                return null;
            }

            let month;
            let day;
            let year;

            if (dobString.length === 8) {
                const monthCandidate = parseInt(dobString.substring(0, 2), 10);
                if (monthCandidate > 12) {
                    year = parseInt(dobString.substring(0, 4), 10);
                    month = parseInt(dobString.substring(4, 6), 10);
                    day = parseInt(dobString.substring(6, 8), 10);
                } else {
                    month = monthCandidate;
                    day = parseInt(dobString.substring(2, 4), 10);
                    year = parseInt(dobString.substring(4, 8), 10);
                }
            } else if (dobString.includes('-')) {
                const parts = dobString.split('-');
                year = parseInt(parts[0], 10);
                month = parseInt(parts[1], 10);
                day = parseInt(parts[2], 10);
            } else {
                return null;
            }

            if ([month, day, year].some((value) => Number.isNaN(value))) {
                return null;
            }

            const dob = new Date(year, month - 1, day);
            if (Number.isNaN(dob.getTime())) {
                return null;
            }

            const today = new Date();
            let age = today.getFullYear() - dob.getFullYear();
            const monthDiff = today.getMonth() - dob.getMonth();

            if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < dob.getDate())) {
                age -= 1;
            }

            return {
                age,
                formatted: `${String(month).padStart(2, '0')}/${String(day).padStart(2, '0')}/${year}`
            };
        }

        function parseDriverLicense(rawData) {
            const data = {
                firstName: '',
                lastName: '',
                middleName: '',
                dob: '',
                licenseNumber: ''
            };

            rawData.split('\n').forEach((line) => {
                if (line.startsWith('DCS')) {
                    data.lastName = line.substring(3).trim();
                } else if (line.startsWith('DAC')) {
                    data.firstName = line.substring(3).trim();
                } else if (line.startsWith('DAD')) {
                    data.middleName = line.substring(3).trim();
                } else if (line.startsWith('DBB')) {
                    data.dob = line.substring(3).trim();
                } else if (line.startsWith('DAQ')) {
                    data.licenseNumber = line.substring(3).trim();
                }
            });

            return data;
        }

        function renderSaleLines(sale) {
            saleLinesContainer.innerHTML = '';
            sale.items.forEach((line) => {
                const wrapper = document.createElement('div');
                wrapper.className = 'sale-line';
                wrapper.innerHTML = `
                    <div class="sale-line-title">${line.description}</div>
                    <div class="sale-line-meta">Qty ${line.quantity} | ${sale.currency || 'USD'} ${line.price.toFixed(2)}</div>
                `;
                saleLinesContainer.appendChild(wrapper);
            });
        }

        async function loadSale() {
            saleLabel.textContent = `Sale: ${saleId}`;
            clerkLabel.textContent = `Clerk: ${clerkId}`;
            try {
                const response = await fetch(`${API_BASE}/sales/${saleId}`);
                if (!response.ok) {
                    throw new Error(`Unable to load sale (${response.status})`);
                }

                const payload = await response.json();
                const sale = payload.data;

                totalLabel.textContent = `Total: ${sale.currency || 'USD'} ${sale.total.toFixed(2)}`;
                renderSaleLines(sale);

                if (sale.verification && !sale.verificationExpired) {
                    setVerificationState('Approved', 'Existing verification found. Complete the sale or rescan to refresh.');
                    statusLabel.textContent = 'Status: Verified';
                    completeSaleBtn.disabled = false;
                } else if (sale.verification && sale.verificationExpired) {
                    setVerificationState('Flagged', 'Previous verification expired. Rescan before completing the sale.');
                    statusLabel.textContent = 'Status: Verification expired';
                    completeSaleBtn.disabled = true;
                } else {
                    setVerificationState('Not verified', 'Scan the government ID to proceed with checkout.');
                    statusLabel.textContent = 'Status: Awaiting scan';
                    completeSaleBtn.disabled = true;
                }
            } catch (error) {
                showToast(error.message);
                setVerificationState('Unavailable', 'Sale data could not be loaded. Retry or contact support.');
            }
        }

        async function submitVerification(licenseData, ageData) {
            statusLabel.textContent = 'Status: Sending verification...';
            setVerificationState('Pending', 'Uploading scan result. Hold tight.');
            completeSaleBtn.disabled = true;

            try {
                const response = await fetch(`${API_BASE}/sales/${saleId}/verify`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        clerkId,
                        scan: {
                            approved: ageData.age >= 21,
                            firstName: licenseData.firstName,
                            lastName: licenseData.lastName,
                            dob: licenseData.dob,
                            age: ageData.age
                        }
                    })
                });

                if (!response.ok) {
                    throw new Error('Unable to record verification. Try again.');
                }

                const payload = await response.json();
                const verification = payload.data;

                if (verification.status === 'approved') {
                    setVerificationState('Approved', 'Verification recorded. You can complete the sale now.');
                    statusLabel.textContent = 'Status: Verified';
                    completeSaleBtn.disabled = false;
                } else {
                    setVerificationState('Flagged', verification.reason || 'Verification rejected.');
                    statusLabel.textContent = 'Status: Verification failed';
                    completeSaleBtn.disabled = true;
                }
            } catch (error) {
                showToast(error.message);
                setVerificationState('Not verified', 'Scan failed to upload. Rescan or refresh.');
                statusLabel.textContent = 'Status: Awaiting scan';
            }
        }

        async function completeSale() {
            const latestVerificationResponse = await fetch(`${API_BASE}/sales/${saleId}`);
            const latestSaleData = await latestVerificationResponse.json();
            const latestVerification = latestSaleData.data.verification;

            if (!latestVerification) {
                showToast('No verification on record. Scan the ID first.');
                return;
            }

            completeSaleBtn.disabled = true;
            completeSaleBtn.textContent = 'Completing...';
            try {
                const response = await fetch(`${API_BASE}/sales/${saleId}/complete`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        verificationId: latestVerification.verificationId
                    })
                });

                if (!response.ok) {
                    const payload = await response.json().catch(() => ({}));
                    throw new Error(payload.message || 'Unable to complete sale. Try again.');
                }

                statusLabel.textContent = 'Status: Completed';
                setVerificationState('Approved', 'Sale flagged as complete. Return to Lightspeed to finish checkout.');
                showToast('Sale completed in mock backend.', 'info');
            } catch (error) {
                showToast(error.message);
                completeSaleBtn.disabled = false;
            } finally {
                completeSaleBtn.textContent = 'Complete Sale';
            }
        }

        function resetResultOverlay() {
            resultOverlay.classList.remove('show');
            ageStatusDiv.textContent = 'Scanning...';
            ageStatusDiv.className = 'age-status';
            nameDiv.textContent = '--';
            dobDiv.textContent = '--';
            ageDiv.textContent = '--';
        }

        function buildVideoConstraints(deviceId) {
            const base = {
                audio: false,
                video: {
                    width: { ideal: 1920 },
                    height: { ideal: 1080 },
                    frameRate: { ideal: 30 },
                    facingMode: deviceId ? undefined : { ideal: 'environment' },
                    advanced: [
                        { focusMode: 'continuous' },
                        { focusMode: 'auto' },
                        { zoom: 2 }
                    ]
                }
            };

            if (deviceId) {
                base.video.deviceId = { exact: deviceId };
            }

            return base;
        }

        function applyTrackEnhancements(track) {
            if (!track || typeof track.getCapabilities !== 'function') {
                return;
            }

            const caps = track.getCapabilities();
            const settings = {};

            if (caps.focusMode && Array.isArray(caps.focusMode)) {
                if (caps.focusMode.includes('continuous')) {
                    settings.focusMode = 'continuous';
                } else if (caps.focusMode.includes('single-shot')) {
                    settings.focusMode = 'single-shot';
                } else if (caps.focusMode.includes('auto')) {
                    settings.focusMode = 'auto';
                }
            }

            if (caps.zoom) {
                const targetZoom =
                    caps.zoom.max > caps.zoom.min
                        ? Math.min(caps.zoom.max, Math.max(caps.zoom.min, caps.zoom.min + (caps.zoom.max - caps.zoom.min) * 0.6))
                        : caps.zoom.min;
                settings.zoom = targetZoom;
            }

            if (caps.torch) {
                settings.torch = false;
            }

            if (Object.keys(settings).length > 0) {
                track.applyConstraints({ advanced: [settings] }).catch(() => undefined);
            }
        }

        async function stopScanning(options = {}) {
            const preserveStream = options.preserveStream || false;
            isScanning = false;
            codeReader.reset();

            if (!preserveStream && currentStream) {
                currentStream.getTracks().forEach((track) => track.stop());
                currentStream = null;
                videoElement.srcObject = null;
            }
        }

        async function refreshCameraList() {
            if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {
                return;
            }

            try {
                const devices = await navigator.mediaDevices.enumerateDevices();
                availableDevices = devices.filter((device) => device.kind === 'videoinput');

                cameraSelect.innerHTML = '';
                availableDevices.forEach((device, index) => {
                    const option = document.createElement('option');
                    option.value = device.deviceId;
                    option.textContent = device.label || `Camera ${index + 1}`;
                    cameraSelect.appendChild(option);
                });

                if (activeDeviceId) {
                    const match = availableDevices.find((device) => device.deviceId === activeDeviceId);
                    if (match) {
                        cameraSelect.value = activeDeviceId;
                    }
                } else if (availableDevices.length > 0) {
                    activeDeviceId = availableDevices[0].deviceId;
                    cameraSelect.value = activeDeviceId;
                }
            } catch (error) {
                console.warn('Unable to refresh camera list', error);
            }
        }
        async function startScanning(deviceId) {
            resetResultOverlay();
            setVerificationState('Not verified', 'Scanning in progress. Align the barcode within the frame.');
            statusLabel.textContent = 'Status: Scanning...';
            completeSaleBtn.disabled = true;

            try {
                await stopScanning();

                const constraints = buildVideoConstraints(deviceId || activeDeviceId);
                const stream = await navigator.mediaDevices.getUserMedia(constraints);
                currentStream = stream;
                videoElement.srcObject = stream;
                await videoElement.play();

                const track = stream.getVideoTracks()[0];
                if (track) {
                    activeDeviceId = track.getSettings().deviceId || deviceId || activeDeviceId;
                    applyTrackEnhancements(track);
                }

                await refreshCameraList();

                if (activeDeviceId && cameraSelect.options.length > 0) {
                    cameraSelect.value = activeDeviceId;
                }

                isScanning = true;

                codeReader.decodeFromVideoElementContinuously(videoElement, async (result, err) => {
                    if (result) {
                        if (isProcessingResult) {
                            return;
                        }
                        isProcessingResult = true;
                        try {
                            await handleScan(result.getText());
                        } finally {
                            isProcessingResult = false;
                        }
                    } else if (err && !(err instanceof ZXing.NotFoundException)) {
                        console.error('Scanner error', err);
                        showToast('Scanner error. Adjust lighting or try another camera.');
                    }
                });
            } catch (error) {
                console.error('Unable to start scanner', error);
                showToast(error.message || 'Unable to access camera.');
                setVerificationState('Unavailable', 'Camera unavailable. Check permissions or hardware.');
                statusLabel.textContent = 'Status: Scanner unavailable';
            }
        }

        async function captureOverlayImage() {
            const videoWidth = videoElement.videoWidth;
            const videoHeight = videoElement.videoHeight;
            if (!videoWidth || !videoHeight) {
                throw new Error('Video stream not ready.');
            }

            const videoRect = videoElement.getBoundingClientRect();
            const overlayRect = overlayBox.getBoundingClientRect();

            const scaleX = videoWidth / videoRect.width;
            const scaleY = videoHeight / videoRect.height;

            const cropXBase = Math.max(0, (overlayRect.left - videoRect.left) * scaleX);
            const cropYBase = Math.max(0, (overlayRect.top - videoRect.top) * scaleY);
            const cropWidthBase = Math.min(videoWidth - cropXBase, overlayRect.width * scaleX);
            const cropHeightBase = Math.min(videoHeight - cropYBase, overlayRect.height * scaleY);

            const expandX = Math.min(cropXBase, cropWidthBase * 0.08);
            const expandY = Math.min(cropYBase, cropHeightBase * 0.15);

            const cropX = Math.max(0, cropXBase - expandX);
            const cropY = Math.max(0, cropYBase - expandY);
            const cropWidth = Math.min(videoWidth - cropX, cropWidthBase + expandX * 2);
            const cropHeight = Math.min(videoHeight - cropY, cropHeightBase + expandY * 2);

            const canvas = document.createElement('canvas');
            canvas.width = Math.max(2, Math.floor(cropWidth));
            canvas.height = Math.max(2, Math.floor(cropHeight));
            const ctx = canvas.getContext('2d');
            ctx.imageSmoothingEnabled = true;
            ctx.filter = 'grayscale(100%) contrast(140%)';
            ctx.drawImage(
                videoElement,
                cropX,
                cropY,
                cropWidth,
                cropHeight,
                0,
                0,
                canvas.width,
                canvas.height
            );


            const image = new Image();
            image.src = canvas.toDataURL('image/png');
            await image.decode();
            return image;
        }

        async function manualSnapshot() {
            if (isProcessingResult) {
                return;
            }

            if (!currentStream) {
                await startScanning(activeDeviceId);
                showToast('Camera restarted. Try again once the preview appears.', 'info');
                return;
            }

            if (videoElement.readyState < 2 || !videoElement.videoWidth) {
                showToast('Camera is still focusing. Hold steady and retry.', 'info');
                return;
            }

            try {
                isProcessingResult = true;
                const image = await captureOverlayImage();
                const result = await codeReader.decodeFromImageElement(image);
                await handleScan(result.getText());
            } catch (error) {
                if (error && (error.name === 'NotFoundException' || error instanceof ZXing.NotFoundException)) {
                    showToast('Could not read the barcode. Move closer, center inside the guides, and try again.');
                } else {
                    console.error('Manual snapshot failed', error);
                    showToast('Snapshot failed. Adjust focus or lighting and retry.');
                }
            } finally {
                isProcessingResult = false;
                if (!resultOverlay.classList.contains('show')) {
                    await startScanning(activeDeviceId);
                }
            }
        }
        async function handleScan(rawData) {
            try {
                await stopScanning();

                const licenseData = parseDriverLicense(rawData);

                if (!licenseData.firstName && !licenseData.lastName) {
                    throw new Error('Could not read name from ID. Please rescan.');
                }

                if (!licenseData.dob) {
                    throw new Error('Could not read date of birth. Please rescan.');
                }

                const ageData = calculateAge(licenseData.dob);
                if (!ageData) {
                    throw new Error('Unable to calculate age. Try another scan.');
                }

                const fullName = [licenseData.firstName, licenseData.middleName, licenseData.lastName]
                    .filter(Boolean)
                    .join(' ');

                nameDiv.textContent = fullName || '--';
                dobDiv.textContent = ageData.formatted;
                ageDiv.textContent = `${ageData.age}`;

                if (ageData.age >= 21) {
                    ageStatusDiv.textContent = '21+ Verified';
                    ageStatusDiv.className = 'age-status approved';
                } else {
                    ageStatusDiv.textContent = 'Under 21';
                    ageStatusDiv.className = 'age-status denied';
                }

                resultOverlay.classList.add('show');

                await submitVerification(licenseData, ageData);
            } catch (error) {
                showToast(error.message || 'Scan failed. Adjust the ID and try again.');
                await startScanning(activeDeviceId);
            }
        }

        scanAgainBtn.addEventListener('click', async () => {
            resetResultOverlay();
            await startScanning(activeDeviceId);
        });

        restartScanBtn.addEventListener('click', async () => {
            resetResultOverlay();
            await startScanning(activeDeviceId);
        });

        completeSaleBtn.addEventListener('click', completeSale);

        refreshCamerasBtn.addEventListener('click', async () => {
            await refreshCameraList();
            await startScanning(cameraSelect.value);
        });

        captureFrameBtn.addEventListener('click', manualSnapshot);

        cameraSelect.addEventListener('change', async (event) => {
            activeDeviceId = event.target.value;
            await startScanning(activeDeviceId);
        });

        window.addEventListener('beforeunload', () => {
            stopScanning();
        });

        (async function init() {
            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                setVerificationState('Unavailable', 'Camera API not supported on this device.');
                showToast('Camera API not supported in this browser.');
                return;
            }

            await loadSale();
            await refreshCameraList();
            await startScanning(activeDeviceId);
        })();
    </script>
</body>
</html>
